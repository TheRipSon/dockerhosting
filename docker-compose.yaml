  services:
    # PostgreSQL Database
    db:
      image: postgres:13
      environment:
        POSTGRES_USER: ${POSTGRES_USER}
        POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
        POSTGRES_DB: ${POSTGRES_DB}
      volumes:
        - postgres_data:/var/lib/postgresql/data
      networks:
        - app-network
      ports:
        - "5432:5432"

    # Docker-in-Docker
    dind:
      build:
        context: ./dind
        dockerfile: Dockerfile
      privileged: true
      environment:
        DOCKER_TLS_CERTDIR: ""  # Disable TLS for simplicity
      networks:
        - app-network
      expose:
        - "2375"
      ports:
        - "2375:2375"  # Open port for Docker communication
      volumes:
        - dind_data:/var/lib/docker

    # Django Backend
    django:
      build:
        context: ./backend
        args:
          DJANGO_SUPERUSER_USERNAME: ${DJANGO_SUPERUSER_USERNAME}
          DJANGO_SUPERUSER_EMAIL: ${DJANGO_SUPERUSER_EMAIL}
          DJANGO_SUPERUSER_PASSWORD: ${DJANGO_SUPERUSER_PASSWORD}
          DJANGO_SECRET: ${DJANGO_SECRET}
        dockerfile: Dockerfile
      volumes:
        - ./backend:/app
      environment:
        DEBUG: 1
        DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
        POSTGRES_DB: ${POSTGRES_DB}
        POSTGRES_USER: ${POSTGRES_USER}
        POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
        DOCKER_HOST: "tcp://dind:2375"
      depends_on:
        - db
        - dind
      networks:
        - app-network
      ports:
        - "8000:8000"
      command: >
        sh -c "python manage.py makemigrations &&
              python manage.py migrate &&
              python manage.py createsuperuser --no-input || true &&
              python manage.py runserver 0.0.0.0:8000"

    # next Frontend
    react:
      build:
        context: ./frontend
        dockerfile: Dockerfile
      volumes:
        - ./frontend:/app
      environment:
        DEBUG: 1
        API_URL: http://django:8000/api/
      networks:
        - app-network
      ports:
        - "3000:3000"

    # NGINX Reverse Proxy
    nginx:
      image: nginx:latest
      volumes:
        - ./nginx/nginx.conf:/etc/nginx/nginx.conf
        - ./nginx/certificates:/etc/ssl/certs
        - ./frontend/build:/usr/share/nginx/html
      ports:
        - "443:443"  # Expose port 443 for HTTPS
        - "80:80"    # Expose port 80 for HTTP redirection
      networks:
        - app-network
      depends_on:
        - react  # Make sure React app is up before NGINX


  volumes:
    postgres_data:
    dind_data:

  networks:
    app-network:
      driver: bridge
