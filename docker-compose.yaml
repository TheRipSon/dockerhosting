services:
  # PostgreSQL Database
  db:
    image: postgres:13
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    ports:
      - "5432:5432"

  # Docker-in-Docker
  dind:
    build:
      context: ./dind
      dockerfile: Dockerfile
    privileged: true
    environment:
      DOCKER_TLS_CERTDIR: ""  # Disable TLS for simplicity
    networks:
      - app-network
    expose:
      - "2375"
    ports:
      - "2375:2375"  # Open port for Docker communication
    volumes:
      - /var/lib/docker
      - ./repos:/app/repos/ 

  # Flask App
  flask:
    build:
      context: ./flask
      dockerfile: Dockerfile  # Flask's Dockerfile
    environment:
      DIND_HOST: "dind"  # Hostname for the dind container
      DIND_PORT: "2375"  # Port for Docker communication
    networks:
      - app-network
    ports:
      - "5000:5000"  # Expose Flask app on port 5000
    volumes:
      - ./repos:/app/repos/ 
    depends_on:
      - dind  # Ensure Flask waits for dind to be ready

  # Django Backend
  django:
    build:
      context: ./backend
      args:
        DJANGO_SUPERUSER_USERNAME: ${DJANGO_SUPERUSER_USERNAME}
        DJANGO_SUPERUSER_EMAIL: ${DJANGO_SUPERUSER_EMAIL}
        DJANGO_SUPERUSER_PASSWORD: ${DJANGO_SUPERUSER_PASSWORD}
        DJANGO_SECRET: ${DJANGO_SECRET}
      dockerfile: Dockerfile
    volumes:
      - ./backend:/app
    environment:
      DEBUG: 1
      DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      DOCKER_HOST: "tcp://dind:2375"
      FLASK_SYNC_URL: "http://flask:5000"
    depends_on:
      - db
      - dind
      - flask
    networks:
      - app-network
    ports:
      - "8000:8000"
    command: >
      sh -c "python manage.py makemigrations &&
            python manage.py migrate &&
            python manage.py createsuperuser --no-input || true &&
            python manage.py runserver 0.0.0.0:8000"

  # React Frontend
  react:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    volumes:
      - ./frontend:/app
    networks:
      - app-network
    ports:
      - "3000:3000"

volumes:
  postgres_data:

networks:
  app-network:
    driver: bridge
